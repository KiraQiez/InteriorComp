
-- Create the BLOCK table
CREATE TABLE BLOCK (
    blockID VARCHAR(2) PRIMARY KEY NOT NULL,
    blockName VARCHAR(255) NOT NULL,
    blockDesc VARCHAR(255)
);

-- Create the ROOM table
CREATE TABLE ROOM (
    roomID VARCHAR(8) PRIMARY KEY NOT NULL,
    blockID VARCHAR(2),
    roomType VARCHAR(8),
    maxCapacity INT,
    availability VARCHAR(20),
    FOREIGN KEY (blockID) REFERENCES BLOCK(blockID)
);

-- Create the USERS table
CREATE TABLE USERS (
    userID VARCHAR(8) PRIMARY KEY NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    userType VARCHAR(50) NOT NULL
);

-- Create the STUDENT table
CREATE TABLE STUDENT (
    stdID VARCHAR(8) PRIMARY KEY NOT NULL,
    stdName VARCHAR(255) NOT NULL,
    stdIC VARCHAR(12) NOT NULL,
    stdPhone VARCHAR(20) NOT NULL,
    stdAddress VARCHAR(255) NOT NULL,
    stdIncome DECIMAL(10, 2) NOT NULL,
    stdParentPhoneNum VARCHAR(30) NOT NULL,
    
    FOREIGN KEY (stdID) REFERENCES USERS(userID)
);

-- Create the STAFF table
CREATE TABLE STAFF (
    staffID VARCHAR(8) PRIMARY KEY NOT NULL,
    staffName VARCHAR(255) NOT NULL,
    staffType VARCHAR(30) NOT NULL,
    staffAge INT NOT NULL,
    FOREIGN KEY (staffID) REFERENCES USERS(userID)
);


-- Create the BOOKING table
CREATE TABLE BOOKING (
    bookingID VARCHAR(8) PRIMARY KEY NOT NULL,
    bookingDate DATE NOT NULL,
    bookstatus VARCHAR(10) NOT NULL,
    checkIn DATE NOT NULL,
    checkOut DATE NOT NULL,
    stdID VARCHAR(8) NOT NULL,
    staffID VARCHAR(8) NOT NULL,
    roomID VARCHAR(8) NOT NULL,

    FOREIGN KEY (stdID) REFERENCES STUDENT(stdID),
    FOREIGN KEY (staffID) REFERENCES STAFF(staffID),
    FOREIGN KEY (roomID) REFERENCES ROOM(roomID)
);

-- Create the REPORT table
CREATE TABLE REPORT (
    reportID VARCHAR(8) PRIMARY KEY NOT NULL,
    reportTitle VARCHAR(255) NOT NULL,
    reportDesc VARCHAR(255) NOT NULL,
    reportStatus VARCHAR(50) NOT NULL,
    studentID VARCHAR(8) NOT NULL,
    handledByStaffID VARCHAR(8),
    checkedByStaffID VARCHAR(8),
    FOREIGN KEY (studentID) REFERENCES STUDENT(stdID),
    FOREIGN KEY (handledByStaffID) REFERENCES STAFF(staffID),
    FOREIGN KEY (checkedByStaffID) REFERENCES STAFF(staffID)
);

-- Insert data into BLOCK table
INSERT INTO BLOCK (blockID, blockName, blockDesc) VALUES 
('A', 'Alpha Block', 'This is the Alpha Block.'),
('B', 'Beta Block', 'This is the Beta Block.'),
('C', 'Gamma Block', 'This is the Gamma Block.');

-- Insert data into ROOM table
INSERT INTO ROOM (roomID, blockID, roomType, maxCapacity, availability) VALUES 
('A-R001', 'A', 'Normal', 1, 'Empty'),
('A-R002', 'A', 'Normal', 2, 'Empty'),
('B-R001', 'B', 'Normal', 1, 'Empty'),
('B-R002', 'B', 'Normal', 2, 'Empty'),
('C-R001', 'C', 'Normal', 4, 'Empty');

-- Insert data into USERS table
INSERT INTO USERS (userID, email, username, password, userType) VALUES 
('U001', 'student1@example.com', 'student1', 'password1', 'Student'),
('S010', 'staff5@example.com', 'staff10', 'password10', 'Staff'),
('S003', 'staff3@example.com', 'staff3', 'password3', 'Staff');

INSERT INTO STAFF (staffID, staffName, staffType, staffAge) VALUES ('S010', 'Laura Clark', 'Admin', 39);
INSERT INTO STAFF (staffID, staffName, staffType, staffAge) VALUES ('S003', 'Michael Brown', 'Receptionist', 29);

-- Insert data into STUDENT table
INSERT INTO STUDENT (stdID, stdName, stdIC, stdPhone, stdAddress, stdIncome, stdParentPhoneNum) VALUES 
('U001', 'John Doe', '123456789012', '0123456789', '123 Main St', 1500.00, '0987654321');

INSERT INTO REPORT (reportID, reportTitle, reportDesc, reportStatus, studentID, handledByStaffID, checkedByStaffID) VALUES
('REP006', 'Pest Problem', 'Pest problem in room E505', 'In Progress', 'U001', 'S003', 'S010');